package se.lu.nateko.cp.cpauth.accounts

import java.sql.Connection
import java.sql.DriverManager
import java.sql.PreparedStatement

import scala.collection.mutable.Buffer
import scala.concurrent.Await
import scala.concurrent.ExecutionContext
import scala.concurrent.Future
import scala.concurrent.duration.Duration

import se.lu.nateko.cp.cpauth.core.UserId

class JdbcUsers(implicit ctxt: ExecutionContext){// extends UsersIo{

	Class.forName("org.hsqldb.jdbc.JDBCDataSource")

	def getConnection(): Connection = DriverManager
		.getConnection("jdbc:hsqldb:file:db/cpauth", "SA", "")

	private def execute(statement: String): Future[Unit] = withConnection{ conn =>
		val st = conn.createStatement
		st.execute(statement)
		st.close()
	}

	private def withConnection[T](work: Connection => T): Future[T] = Future{
		val conn = getConnection
		try{
			work(conn)
		} finally{
			conn.close()
		}
	}

	Await.ready(createTable(), Duration.Inf)
	Await.ready(dropColumnIfExists("GIVENNAME"), Duration.Inf)
	Await.ready(dropColumnIfExists("SURNAME"), Duration.Inf)

	def dropColumnIfExists(col: String): Future[Unit] =
		execute(s"""ALTER TABLE "USERS" DROP COLUMN "$col"""")

	def createTable(): Future[Unit] = {
		val sql = """create table if not exists "USERS" (
			"USER_ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL,
			"GIVENNAME" VARCHAR(254) NOT NULL,
			"SURNAME" VARCHAR(254) NOT NULL,
			"MAIL" VARCHAR(254) NOT NULL PRIMARY KEY,
			"PASSWORD" VARCHAR(254) NOT NULL,
			"ISADMIN" BOOLEAN DEFAULT false NOT NULL)"""
		execute(sql)
	}


	def addUser(userEntry: UserEntry, password: String): Future[Unit] = Future{
		val ps: PreparedStatement = getConnection.prepareStatement(
			"""INSERT INTO "USERS" ("MAIL", "PASSWORD", "ISADMIN") VALUES (?, ?, ?)"""
		)
		try{
			val uinfo = userEntry.id
			val passHash = Users.hash(uinfo.email, password)

			ps.setString(2, uinfo.email)
			ps.setString(3, passHash)
			ps.setBoolean(4, userEntry.isAdmin)
			ps.execute()
		}finally{
			ps.getConnection().close()
		}
	}

	def listUsers: Future[Seq[UserEntry]] = withConnection{conn =>
		val st = conn.createStatement
		val rs = st.executeQuery("""SELECT "MAIL", "ISADMIN" FROM "USERS"""")

		val result = Buffer.empty[UserEntry]

		while(rs.next()){
			result += UserEntry(UserId(rs.getString("MAIL")), rs.getBoolean("ISADMIN"))
		}
		result
	}
}
